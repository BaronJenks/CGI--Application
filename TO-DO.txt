TO-DO: Future additions to CGI::Application
===============================================

> -----Original Message-----
> From: Arkady Grudzinsky [mailto:grudziar@linuxhightech.com] 
> Sent: Wednesday, June 04, 2003 6:28 PM
> To: Jesse Erlbaum
> Cc: cgiapp@lists.erlbaum.net
> Subject: [cgiapp] Error in CGI::App V 3.1 documentation
> 
> 
> Hi, Jesse.
> 
> The example of cgiapp_postrun() usage in V 3.1 documentation does not
> work.  Namely, the old output should be replaced with
> 
>               $$output_ref = $new_output;
> 
> rather than
> 
>                $output_ref = \$new_output;
> 
> 
> $$output_ref = $new_output replaces the contents of $output_ref rather
> than pointing $output_ref to a different address and forgetting it,
> because $output_ref is local to cgiapp_postrun and is not 
> used by run().
> 
>               $_[1] = \$new_output;
> 
> also works.
> 
> Otherwise I am very happy with cgiapp_postrun.
> 
> Thanks.
> 
> Arkady.

---

> From: Steve Hay [mailto:steve.hay@uk.radan.com] 
> Sent: Monday, April 28, 2003 4:23 AM
> To: cgiapp@lists.erlbaum.net
> Subject: [cgiapp] Use of CGI::Carp
> 
> 
> Hi all,
> 
> I'd like to propose a minor change to CGI::Application to change the 
> line near the top of the module that says:
> 
>     use CGI::Carp;
> 
> to just:
> 
>     use Carp;
> 
> CGI::Application doesn't necessarily use CGI.pm (you can pass a 
> different type of "CGI" object to new() via the QUERY 
> parameter), so it 
> shouldn't necessarily use CGI::Carp either.
> 
> If users want to use CGI::Carp in their CGI applications then 
> they can 
> easily put "use CGI::Carp;" in their application superclass.

---

> From: Cees Hek [mailto:cees@sitesuite.com.au] 
> Sent: Monday, June 02, 2003 1:38 PM
> To: Jesse Erlbaum
> Subject: RE: [cgiapp] When is next version coming?
> 
> 
> Quoting Jesse Erlbaum <jesse@erlbaum.net>:
> 
> > I don't think I ever got your patch -- the message had no 
> attachment.
> > Please re-send.
> 
> Sorry about that.  I've attached it again.  It really is a 
> minor patch.  It just
> merges the hash provided to header_props instead of 
> clobbering it on subsequent
> calls..
> 
> > I will take a look at the situation and come up with something a bit
> > more intuitive.  I was thinking of an interface similar to 
> that provided
> > by Class::MethodMaker -- the ability to act on individual keys in a
> > simple manner.
> > 
> > There may be other things in the system which should be similarly
> > addressed.  I will bring it up as a topic on the list this week for
> > discussion.
> 
> Sounds good, I'll keep an eye out for that.
> 
> Thanks,
> 
> Cees
> 

=== PATCH ===>
--- Application.pm.orig	2003-05-07 22:23:25.000000000 -0400
+++ Application.pm	2003-05-07 22:43:51.000000000 -0400
@@ -286,11 +286,12 @@
 	if (scalar(@data)) {
 		# Is it a hash, or hash-ref?
 		if (ref($data[0]) eq 'HASH') {
-			# Make a copy
-			%$rh_p = %{$data[0]};
+			# Merge the new elements with what we already have
+			@$rh_p{keys %{$data[0]}} = values %{$data[0]};
 		} elsif ((scalar(@data) % 2) == 0) {
 			# It appears to be a possible hash (even # of elements)
-			%$rh_p = @data;
+			my %data = @data;
+			@$rh_p{keys %data} = values %data;
 		} else {
 			croak("Odd number of elements passed to header_props().  Not a valid hash")
 		}
<=== PATCH ===


---

Separate CGI::Application::Mailform from CGI-App

---

Release Apache::Application based on Apache::Request
  o Wrapper class for CGI.pm compatibility.

---

